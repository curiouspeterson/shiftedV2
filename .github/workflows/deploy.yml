name: Deploy
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Testing deployment workflow with updated Supabase credentials and environment variables
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Add overall job timeout
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Debug Environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Checking for required secrets..."
          if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then echo "Missing NEXT_PUBLIC_SUPABASE_URL" && exit 1; fi
          if [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then echo "Missing NEXT_PUBLIC_SUPABASE_ANON_KEY" && exit 1; fi
          if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then echo "Missing SUPABASE_SERVICE_ROLE_KEY" && exit 1; fi
          if [ -z "$JWT_SECRET" ]; then echo "Missing JWT_SECRET" && exit 1; fi
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then echo "Missing SUPABASE_ACCESS_TOKEN" && exit 1; fi
          if [ -z "$SUPABASE_DB_PASSWORD" ]; then echo "Missing SUPABASE_DB_PASSWORD" && exit 1; fi

      - name: Install Dependencies
        run: |
          npm ci
          npm list --depth=0

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Login to Supabase
        run: |
          echo "Logging in to Supabase..."
          supabase login --token "${{ secrets.SUPABASE_ACCESS_TOKEN }}" || {
            echo "Failed to login to Supabase"
            exit 1
          }

      - name: Check Migration Files
        run: |
          if [ ! -d "supabase/migrations" ]; then
            echo "No migrations directory found"
            exit 1
          fi
          
          if [ -z "$(ls -A supabase/migrations)" ]; then
            echo "No migration files found"
            exit 1
          fi
          
          echo "Found migration files:"
          ls -la supabase/migrations

      - name: Prepare Migrations
        run: |
          echo "Preparing migrations for compatibility..."
          for file in supabase/migrations/*.sql; do
            echo "Processing $file..."
            # Create a backup
            cp "$file" "${file}.bak"
            
            # Remove PROCEDURES related statements
            sed -i '/GRANT.*ON.*PROCEDURES/d' "$file"
            sed -i '/ALTER DEFAULT PRIVILEGES.*PROCEDURES/d' "$file"
            
            # Add alternative grants for older PostgreSQL versions
            if grep -q "PROCEDURES" "${file}.bak"; then
              echo "-- Alternative grants for older PostgreSQL versions" >> "$file"
              echo "GRANT ALL ON ALL FUNCTIONS IN SCHEMA auth TO service_role;" >> "$file"
              echo "ALTER DEFAULT PRIVILEGES IN SCHEMA auth GRANT ALL ON FUNCTIONS TO service_role;" >> "$file"
            fi
            
            # Remove backup
            rm "${file}.bak"
          done

      - name: Link and Push Database Changes
        run: |
          echo "Linking Supabase project..."
          echo "${{ secrets.SUPABASE_DB_PASSWORD }}" | supabase link --project-ref wgpehvclyqlyhseqdmqj || {
            echo "Failed to link Supabase project"
            exit 1
          }
          
          echo "Running dry-run first..."
          if supabase db push --dry-run; then
            echo "Dry run successful, proceeding with actual push..."
            echo "y" | supabase db push || {
              echo "Failed to push database changes"
              exit 1
            }
          else
            echo "Dry run failed, aborting"
            exit 1
          fi
        timeout-minutes: 5

      - name: Build
        run: |
          echo "Starting build process..."
          npm run build
        env:
          CI: true
        timeout-minutes: 5

      # Vercel deployment will be handled by the Vercel GitHub integration 